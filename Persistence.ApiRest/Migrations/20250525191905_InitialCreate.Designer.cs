// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.ApiRest;

#nullable disable

namespace Persistence.ApiRest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250525191905_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Model.Cliente", b =>
                {
                    b.Property<int>("id_cliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_cliente"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("fecha_registro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ubicacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_cliente");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Domain.Model.Empresa", b =>
                {
                    b.Property<int>("id_empresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_empresa"));

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("fecha_registro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombre_negocio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ubicacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_empresa");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Domain.Model.Favorito", b =>
                {
                    b.Property<int>("id_cliente")
                        .HasColumnType("int");

                    b.Property<int>("id_receta")
                        .HasColumnType("int");

                    b.HasKey("id_cliente", "id_receta");

                    b.HasIndex("id_receta");

                    b.ToTable("Favoritos");
                });

            modelBuilder.Entity("Domain.Model.PedidoOferta", b =>
                {
                    b.Property<int>("id_pedido_oferta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_pedido_oferta"));

                    b.Property<string>("comentario")
                        .HasColumnType("longtext");

                    b.Property<string>("descripcionOferta")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("disponibilidad")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("fechaPedido")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("fechaValoracion")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("id_cliente")
                        .HasColumnType("int");

                    b.Property<int>("id_empresa")
                        .HasColumnType("int");

                    b.Property<int>("id_receta")
                        .HasColumnType("int");

                    b.Property<double>("precio")
                        .HasColumnType("double");

                    b.Property<int?>("puntuacion")
                        .HasColumnType("int");

                    b.HasKey("id_pedido_oferta");

                    b.HasIndex("id_cliente");

                    b.HasIndex("id_empresa");

                    b.HasIndex("id_receta");

                    b.ToTable("PedidosOfertas");
                });

            modelBuilder.Entity("Domain.Model.Receta", b =>
                {
                    b.Property<int>("id_receta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_receta"));

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("id_cliente_creador")
                        .HasColumnType("int");

                    b.Property<string>("imagenUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ingredientes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("pasos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_receta");

                    b.HasIndex("id_cliente_creador");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("Domain.Model.Favorito", b =>
                {
                    b.HasOne("Domain.Model.Cliente", "Cliente")
                        .WithMany("Favoritos")
                        .HasForeignKey("id_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.Receta", "Receta")
                        .WithMany("Favoritos")
                        .HasForeignKey("id_receta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Domain.Model.PedidoOferta", b =>
                {
                    b.HasOne("Domain.Model.Cliente", "ClienteRealiza")
                        .WithMany("PedidosRealizados")
                        .HasForeignKey("id_cliente");

                    b.HasOne("Domain.Model.Empresa", "Empresa")
                        .WithMany("OfertasYPedidos")
                        .HasForeignKey("id_empresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.Receta", "Receta")
                        .WithMany("PedidosYOfertas")
                        .HasForeignKey("id_receta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClienteRealiza");

                    b.Navigation("Empresa");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Domain.Model.Receta", b =>
                {
                    b.HasOne("Domain.Model.Cliente", "ClienteCreador")
                        .WithMany("RecetasCreadas")
                        .HasForeignKey("id_cliente_creador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClienteCreador");
                });

            modelBuilder.Entity("Domain.Model.Cliente", b =>
                {
                    b.Navigation("Favoritos");

                    b.Navigation("PedidosRealizados");

                    b.Navigation("RecetasCreadas");
                });

            modelBuilder.Entity("Domain.Model.Empresa", b =>
                {
                    b.Navigation("OfertasYPedidos");
                });

            modelBuilder.Entity("Domain.Model.Receta", b =>
                {
                    b.Navigation("Favoritos");

                    b.Navigation("PedidosYOfertas");
                });
#pragma warning restore 612, 618
        }
    }
}
